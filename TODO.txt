----------------------------
TODO for version 0.2


* use the SQLLite format for the persistent store

X * Fixed deletion of jobs (problem: if not found on the xgrid, a job could be deleted from another program... or maybe not loaded yet) --> need some timers
X * problem with stdin!! it has to be included in the inputFiles...
X * allow the user to cancel the connection while trying to connect to a server
X * bug: cannot remove server from the GUI and the store
X * when a task fail, should not let the data source treat the data, but should save results in a special 'failures folder'
X * use a hierachical structure for the results, so that one does not get 1000000 folders in one folder.
X * bug in number of commands per submission: the number of commands per job is actually one more that set in the GUI and metajob attribute
X * really honor -so and -se and -out
X * cleaner GUI:
	X * use the toolbar
	X * add metajob status
	X * fix metajob progress
	X * add xgrid job table view
	X * add metatask table view
	X * make sure Meta-Job is used consistently in the GUI


----------------------------
TODO for version 0.3
* continuous save of the store (?)
* really honor maxBytesPerSubmission in MetaJob submissions
* submit to several grids, take available agents into account
* refactor to better separate GridStuffer model and views, and to separate it from the app delegate --> ultimately a framework
 --> this means I will also need a separate class to play the role of the application delegate in the framework, e.g. class 'GridStufferInterface'
* the data source of a metajob should not have any idea of indexes, but just 'nextTask'. Or maybe leave the possibility for two types of data source, one called with indexes and one called using 'nextTask'.
* use a delegate with XGSServer
* entity names need also a suffix, like class names, if GridStuffer is going to be a framework..
* more comments in the class headers
* Application Support folder: use a hierarchical structure instead of just different names for different versions/debug
* Persistent store: there might be several different stores in use by different apps or the same app
----------------------------

OTHER BUGS/FEATURES

* have a 'default' metaJob, editable when no MetaJob is displayed. To do it, I could have the default metaJob in the store, and subclass NSArrayController and add one of NSPlaceholder methods. Well, I tried, it is not that easy... I may have to go to the user defaults. OK --> create a dictionary in the user defaults. If it does not exist, do not use it (!). A selected job can be used to 'Set Default Settings' in the menu or with a button

* when creating a new meta job, could check that it does not use an output folder shared with another metajob. In fact, it could work fine (if the same thread probably!).

* clicking "Load Demo" deletes all the stuff that another job is potentially using

* maybe the submission timer in meta jobs could be triggered only when needed --> in other words, use notifications rather than polling for job submissions

* run the job submission and retrieval in a different thread if too much spinning wheel...



----------------------------
TO THINK ABOUT:

* problems when saving files through the -out flag:
	* same task run twice, but different number of files --> all the files should have the same suffix
	* same thing with 2 different tasks sharing some file names and the same -out path; the user should not do that, but it should be better handled anyway
	* grouping files in the same folder is a good thing when save to the default output folder, but not for the -out flag
	* but then the problem is : the data source is not supposed to know the taskIndex, even less about the taskRange
	* so maybe the data source could optionally return a path for -out, -se or -so, nil if it want to let the metaJob handle it